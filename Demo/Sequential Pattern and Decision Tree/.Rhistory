tail(Daily_EA, 45)
head(Daily_EA, 45)
EA_Official_Tweets <- filter(data, grepl("EnergyAustralia",data$screenName))
head(EA_Official_Tweets)
Daily_EA <- EA_Official_Tweets
head(Daily_EA)
nrow(Daily_EA)
Daily_EA <- table(factor(format(Daily_EA$created,"%D")))
head(Daily_EA)
head(Daily_EA)
Daily_EA <- table(factor(format(Daily_EA$created,"%d")))
Daily_EA <- table(factor(format(Daily_EA$created,"%d")))
Daily_EA <- table(factor(format(Daily_EA$created,"%D")))
Daily_EA <- EA_Official_Tweets
head(Daily_EA)
nrow(Daily_EA)
Daily_EA <- table(factor(format(Daily_EA$created,"%d")))
head(Daily_EA)
Daily_EA <- EA_Official_Tweets
head(Daily_EA)
nrow(Daily_EA)
Daily_EA <- table(factor(format(Daily_EA$created,"%Y-%m-%d")))
head(Daily_EA)
Daily_EA <- as.data.frame(Daily_EA)
head(Daily_EA)
names(Daily_EA)[names(Daily_EA) == 'Var1'] <- 'Date'
head(Daily_EA, 45)
head(Daily_EA, 5)
sum(Daily_EA$Freq)
Line2 <- gvisLineChart(Daily_EA)
plot(Line2)
Line2 <- gvisLineChart(Daily_EA, options=list(title="rend",
titleTextStyle="{color:'red',
fontName:'Courier',
fontSize:16}"))
plot(Line2)
Line2 <- gvisLineChart(Daily_EA, options=list(title="rend",
titleTextStyle="{color:'red',
fontName:'Courier',
fontSize:4}"))
plot(Line2)
Line2 <- gvisLineChart(Daily_EA, options=list(title="Trend",
vAxes="{color:'red',
fontName:'Courier',
fontSize:4}"))
plot(Line2)
Line2 <- gvisLineChart(Daily_EA, options=list(vAxis="{color:'red',
fontName:'Courier',
fontSize:4}"))
plot(Line2)
q <- ggplot(data=Daily_EA, aes(x=Date, y=Freq, group=1)) +
geom_line() +
geom_point()
library(ggplot2)
q <- ggplot(data=Daily_EA, aes(x=Date, y=Freq, group=1)) +
geom_line() +
geom_point()
q + theme(axis.text.x = element_text(angle = 90, hjust = 1))
Line2 <- gvisLineChart(Daily_EA, options=list(vAxis="{color:'red',
fontName:'Courier',
fontSize:4}",
hAxes="[{title:'Date',
textPosition: 'out'}]))
;
;
;;;
;;;);
;;;);}})]
plot(Line2)
quit
quit()
quit()+
quit()+;"
quit()+;";
Line2 <- gvisLineChart(Daily_EA, options=list(vAxis="{color:'red',
fontName:'Courier',
fontSize:4}",
hAxes="[{title:'Date',
textPosition: 'out'}]"))
plot(Line2)
Line2 <- gvisLineChart(Daily_EA, options=list(vAxis="{color:'red',
fontName:'Courier',
fontSize:4}",
hAxes="[{title:'Date',
textPosition: 'out', fontSize:4}]"))
plot(Line2)
Line2 <- gvisLineChart(Daily_EA, options=list(vAxis="{color:'red',
fontName:'Courier',
fontSize:4}",
hAxes="[{title:'Date',
fontSize:4}]"))
plot(Line2)
Line2 <- gvisLineChart(Daily_EA, options=list(hAxes="[{title:'Date', fontSize:4}]"))
plot(Line2)
Daily_OE <- Origin_Official_Tweets
head(Daily_OE)
nrow(Daily_OE)
Daily_OE <- table(factor(format(Daily_OE$created,"%Y-%m-%d")))
head(Daily_OE)
Daily_OE <- as.data.frame(Daily_OE)
names(Daily_OE)[names(Daily_OE) == 'Var1'] <- 'Date'
head(Daily_OE, 5)
Daily_AGL <- AGL_Official_Tweets
head(Daily_AGL)
nrow(Daily_AGL)
Daily_AGL <- table(factor(format(Daily_AGL$created,"%Y-%m-%d")))
head(Daily_AGL)
Daily_AGL <- as.data.frame(Daily_AGL)
names(Daily_AGL)[names(Daily_AGL) == 'Var1'] <- 'Date'
head(Daily_AGL, 5)
sum(Daily_AGL$Freq)
sum(Daily_OE$Freq)
head(EA_Official_Tweets)
head(data)
asd <- data[data$screenName != EnergyAustralia | data$screenName != originenergy | data$screenName != aglenergy, ]
asd <- data[data$screenName != "EnergyAustralia" | data$screenName != "originenergy" | data$screenName != "aglenergy", ]
nrow(asd)
nrow(data)
head(asd)
asd <- data[data$screenName != "EnergyAustralia" & data$screenName != "originenergy" & data$screenName != "aglenergy", ]
nrow(data)
nrow(asd)
head(data)
asd <- data[data$screenName != "EnergyAustralia" & data$screenName != "originenergy" & data$screenName != "aglenergy" & data$text != "@EnergyAustralia" & data$text != "@originenergy" & data$text != "@aglenergy", ]
nrow(data)
nrow(asd)
general_tweets <- data[data$screenName != "EnergyAustralia" & data$screenName != "originenergy" & data$screenName != "aglenergy" & data$text != "@EnergyAustralia" & data$text != "@originenergy" & data$text != "@aglenergy", ]
head(general_tweets)
library(RTextTools)
library(topicmodels)
data <- read.csv('C:/Users/skumarravindran/Desktop/Sentiment Analysis/EA/data/test1.csv')
matrix <- create_matrix(cbind(as.vector(data$clean_tweet)), language="english", removeNumbers=TRUE, stemWords=TRUE)
rowTotals <- apply(matrix , 1, sum) #Find the sum of words in each Document
matrix.new   <- matrix[rowTotals> 0, ]           #remove all docs without words
lda <- LDA(matrix.new, 30)
terms(lda)
install.packages("qdap")
library(qdap)
counts(polarity(DATA$state))[, "polarity"]
polarity(SimplifyText(DATA$state))$all$polarity
Sys.setenv(JAVA_HOME='C:\\Program Files (x86)\\Java\\jdk1.8.0_91\\jre') # for 32-bit version
library(qdap)
library(rJava)
?polarity
library(stringr)
library(plyr)
?polarity
library(qdap)
?polarity
library(arulesSequences)
install.packages("arulesSequences")
library(arulesSequences)
install.packages("C:\\Users\\skumarravindran\\Documents\\packages\\arulesSequences_0.2-15.tar.gz", repos = NULL, type="source")
install.packages("C:\\Users\\skumarravindran\\Documents\\packages\\arulesSequences_0.2-13.tar.gz", repos = NULL, type="source")
if(!require(installr)) {
install.packages("installr"); require(installr)} #load / install+load installr
updateR() # this will start the updating process of your R installation.  It will check for newer versions, and if one is available, will guide you through the decisions you'd need to make.
install.packages("arulesSequences")
library(arulesSequences)
data(zaki )
summary(zaki)
as(zaki, "data.frame")
Trans_data <- read_baskets(con = "sample .txt", info = c("sequenceID","eventID","SIZE"))
Trans_data <- read_baskets(zaki, info = c("sequenceID","eventID","SIZE"))
Trans_data <- read_baskets("zaki", info = c("sequenceID","eventID","SIZE"))
seq_rules <- cspade(Trans_data  , parameter = list(support = 0.55), control   = list(verbose=TRUE))
outlook = c('rain', 'overcast', 'rain', 'sunny', 'rain',
'rain', 'sunny', 'overcast', 'overcast', 'overcast',
'sunny', 'sunny', 'rain', 'rain', 'overcast',
'sunny', 'overcast', 'overcast', 'sunny', 'sunny',
'sunny', 'overcast')
humidity = c(79, 74, 80, 60, 65, 79, 60, 74, 77, 80,
71, 70, 80, 65, 70, 56, 80, 70, 56, 70,
71, 77)
windy = c(T, T, F, T, F, T, T, T, T, F, T, F, F, F, T, T, F, T, T, F, T, T)
play = c(F, F, T, F, T, F, F, T, T, T, F, F, T, T, T, T, T, T, F, T, F, T)
game = data.frame(outlook, humidity, windy, play)
game$score = NA
attach(game)
game$score[outlook == 'sunny' & humidity <= 70] = 5/8
game$score[outlook == 'sunny' & humidity > 70] = 1 - 3/4
game$score[outlook == 'overcast'] = 4/5
game$score[outlook == 'rain' & windy == T] = 1 - 2/2
game$score[outlook == 'rain' & windy == F] = 3/3
detach(game)
game$predict = game$score >= 0.5
game$correct = game$predict == game$play
library(ROCR)
install.packages("ROCR")
library(ROCR)
install.packages("gplots")
library(ROCR)
pred = prediction(game$score, game$play)
roc = performance(pred, measure="tpr", x.measure="fpr")
plot(roc, col="orange", lwd=2)
lines(x=c(0, 1), y=c(0, 1), col="red", lwd=2)
auc = performance(pred, 'auc')
slot(auc, 'y.values')
library(tree)
head(game)
tr = tree(frmla, data=raw)
tr = tree(game, data=raw)
auc = performance(pred, 'auc')
slot(auc, 'y.values')
library(rpart)
fit <- rpart(Kyphosis ~ Age + Number + Start,
method="class", data=kyphosis)
printcp(fit) # display the results
plotcp(fit) # visualize cross-validation results
summary(fit) # detailed summary of splits
# plot tree
plot(fit, uniform=TRUE,
main="Classification Tree for Kyphosis")
text(fit, use.n=TRUE, all=TRUE, cex=.8)
# create attractive postscript plot of tree
post(fit, file = "c:/tree.ps",
title = "Classification Tree for Kyphosis")
head(Kyphosis)
data(Kyphosis)
data(kyphosis)
a <- data(kyphosis)
head(a)
head(data.frame(a)
head(data.frame(a))
# grow tree
head(data.frame(a))
head(game)
fit <- rpart(play ~ outlook + humidity + windy, method="class", data=game)
printcp(fit) # display the results
plotcp(fit) # visualize cross-validation results
summary(fit) # detailed summary of splits
plot(fit, uniform=TRUE,
main="Classification Tree for Kyphosis")
text(fit, use.n=TRUE, all=TRUE, cex=.8)
# create attractive postscript plot of tree
post(fit, file = "c:/tree.ps",
title = "Classification Tree for Kyphosis")
data(kyphosis)
head(kyphosis)
fit <- rpart(Kyphosis ~ Age + Number + Start, method="class", data=kyphosis)
printcp(fit) # display the results
plotcp(fit) # visualize cross-validation results
summary(fit) # detailed summary of splits
# plot tree
plot(fit, uniform=TRUE,
main="Classification Tree for Kyphosis")
text(fit, use.n=TRUE, all=TRUE, cex=.8)
# create attractive postscript plot of tree
post(fit, file = "c:/tree.ps",
title = "Classification Tree for Kyphosis")
plot(fit, uniform=TRUE, main="Classification Tree for Kyphosis")
text(fit, use.n=TRUE, all=TRUE, cex=.8)
head(kyphosis)
plot(fit, uniform=TRUE, main="Classification Tree for Kyphosis")
text(fit, use.n=TRUE, all=TRUE, cex=.7)
plot(fit, uniform=TRUE, main="Classification Tree for Kyphosis")
text(fit, use.n=TRUE, all=TRUE, cex=.5)
plot(fit, uniform=TRUE, main="Classification Tree for Kyphosis")
text(fit, use.n=TRUE, all=TRUE, cex=1)
text(fit, use.n=TRUE, all=TRUE, cex=1)
summary(fit) # detailed summary of splits
data(zaki)
summary(zaki)
as(zaki, "data.frame")
setwd("C:\\Users\\skumarravindran\\Desktop\\Big Data analytics Sessions\\Sequential Patter and Decision Tree - TT3")
write.csv(zaki,"sample.txt")
getwd()
,
write.csv(zaki,'sample.txt')
samp <- as(zaki, "data.frame")
write.csv(samp,'sample.txt')
zaki <- read_baskets(con = "sample.txt", info = c("sequenceID","eventID","SIZE"))
zaki <- read_baskets(con = "sample.txt", info = c("sequenceID","eventID","SIZE"))
read.csv('sample.csv')
samp <- read.csv('sample.csv')
zaki <- read_baskets(samp, info = c("sequenceID","eventID","SIZE"))
zaki <- read_baskets(con = samp, info = c("sequenceID","eventID","SIZE"))
zaki <- read_baskets(con = "sample.txt", info = c("sequenceID","eventID","SIZE"))
zaki <- read_baskets(con = "sample.csv", info = c("sequenceID","eventID","SIZE"))
zaki <- read_baskets(con = "sample.txt", info = c("sequenceID","eventID","SIZE"))
seq_rules <- cspade(zaki, parameter = list(support = 0.55), control   = list(verbose=TRUE))
#Summary information about the rules generated
summary(seq_rules)
#The rules generated with the support details
as(seq_rules, "data.frame")
data(zaki)
summary(zaki)
as(zaki, "data.frame")
summary(zaki)
seq_rules <- cspade(zaki, parameter = list(support = 0.55), control   = list(verbose=TRUE))
#Summary information about the rules generated
summary(seq_rules)
#The rules generated with the support details
as(seq_rules, "data.frame")
?cspade
seq_rules <- cspade(zaki, parameter = list(support = 0.05), control   = list(verbose=TRUE))
summary(seq_rules)
as(seq_rules, "data.frame")
data(zaki)
summary(zaki)
as(zaki, "data.frame")
summary(zaki)
seq_rules <- cspade(zaki, parameter = list(support = 0.05))
#Summary information about the rules generated
summary(seq_rules)
as(seq_rules, "data.frame")
seq_rules <- cspade(zaki, parameter = list(support = 0.55))
#Summary information about the rules generated
summary(seq_rules)
data(zaki)
summary(zaki)
fit <- rpart(Kyphosis ~ Age + Number + Start, method="class", data=kyphosis)
printcp(fit) # display the results
plotcp(fit) # visualize cross-validation results
summary(fit) # detailed summary of splits
# plot tree
plot(fit, uniform=TRUE, main="Classification Tree for Kyphosis")
text(fit, use.n=TRUE, all=TRUE, cex=1)
fit
game
head(game)
fit <- rpart(play ~ outlook + humidity + windy, method="class", data=game)
fit
?rpart
fit <- rpart(play ~ outlook + humidity + windy, data=game)
fit
fit <- rpart(Kyphosis ~ Age + Number + Start, method="class", data=kyphosis)
fit
head(kyphosis)
head(game)
fit <- rpart(play ~ outlook + humidity + windy, data=game)
fit
printcp(fit) # display the results
plotcp(fit) # visualize cross-validation results
summary(fit) # detailed summary of splits
# plot tree
plot(fit, uniform=TRUE, main="Classification Tree for Kyphosis")
text(fit, use.n=TRUE, all=TRUE, cex=1)
data(kyphosis)
fit <- rpart(Kyphosis ~ Age + Number + Start, method="class", data=kyphosis)
# plot tree
plot(fit, uniform=TRUE, main="Classification Tree for Kyphosis")
text(fit, use.n=TRUE, all=TRUE, cex=1)
outlook = c('rainy', 'rainy', 'overcast', 'sunny', 'sunny',
'sunny', 'overcast', 'rainy', 'rainy', 'sunny',
'rainy', 'overcast', 'overcast', 'sunny')
humidity = c('high', 'high', 'high', 'high', 'normal',
'normal', 'normal', 'high', 'normal', 'normal',
'normal', 'high', 'normal', 'high')
temp = c('hot', 'hot', 'hot', 'mild', 'cool',
'cool', 'cool', 'mild', 'cool', 'mild',
'mild', 'mild', 'hot', 'mild')
play = c('no', 'no', 'yes', 'yes', 'yes',
'no', 'yes', 'no', 'yes', 'yes',
'yes', 'yes', 'yes', 'no')
outlook = c('rainy', 'rainy', 'overcast', 'sunny', 'sunny',
'sunny', 'overcast', 'rainy', 'rainy', 'sunny',
'rainy', 'overcast', 'overcast', 'sunny')
humidity = c('high', 'high', 'high', 'high', 'normal',
'normal', 'normal', 'high', 'normal', 'normal',
'normal', 'high', 'normal', 'high')
temp = c('hot', 'hot', 'hot', 'mild', 'cool',
'cool', 'cool', 'mild', 'cool', 'mild',
'mild', 'mild', 'hot', 'mild')
windy = c('false', 'true', 'false', 'false', 'false',
'true', 'true', 'false', 'false', 'false',
'true', 'true', 'false', 'true')
play = c('no', 'no', 'yes', 'yes', 'yes',
'no', 'yes', 'no', 'yes', 'yes',
'yes', 'yes', 'yes', 'no')
game = data.frame(outlook, humidity, temp, windy, play)
head(game)
fit <- rpart(play ~ outlook + humidity + temp + windy, method="class", data=game)
fit
game
fit <- rpart(play ~ outlook + humidity + temp + windy, method="class", data=game)
fit
plot(fit, uniform=TRUE, main="Classification Tree for Kyphosis")
text(fit, use.n=TRUE, all=TRUE, cex=1)
head(kyphosis)
fit <- rpart(play ~ outlook + humidity + temp + windy, data=game)
fit
?rpart
fit <- rpart(play ~ outlook + humidity + temp + windy, data=game)
game
head(kyphosis)
fit <- rpart(play ~ outlook + humidity + temp + windy, data=game)
fit
write.csv(game, "game.csv")
IsPure <- function(data) {
length(unique(data[,ncol(data)])) == 1
}
Entropy <- function( vls ) {
res <- vls/sum(vls) * log2(vls/sum(vls))
res[vls == 0] <- 0
-sum(res)
}
InformationGain <- function( tble ) {
entropyBefore <- Entropy(colSums(tble))
s <- rowSums(tble)
entropyAfter <- sum (s / sum(s) * apply(tble, MARGIN = 1, FUN = Entropy ))
informationGain <- entropyBefore - entropyAfter
return (informationGain)
}
TrainID3 <- function(node, data) {
node$obsCount <- nrow(data)
#if the data-set is pure (e.g. all toxic), then
if (IsPure(data)) {
#construct a leaf having the name of the pure feature (e.g. 'toxic')
child <- node$AddChild(unique(data[,ncol(data)]))
node$feature <- tail(names(data), 1)
child$obsCount <- nrow(data)
child$feature <- ''
} else {
#calculate the information gain
ig <- sapply(colnames(data)[-ncol(data)],
function(x) InformationGain(
table(data[,x], data[,ncol(data)])
)
)
#chose the feature with the highest information gain (e.g. 'color')
#if more than one feature have the same information gain, then take
#the first one
feature <- names(which.max(ig))
node$feature <- feature
#take the subset of the data-set having that feature value
childObs <- split(data[ ,names(data) != feature, drop = FALSE],
data[ ,feature],
drop = TRUE)
for(i in 1:length(childObs)) {
#construct a child having the name of that feature value (e.g. 'red')
child <- node$AddChild(names(childObs)[i])
#call the algorithm recursively on the child and the subset
TrainID3(child, childObs[[i]])
}
}
}
library(data.tree)
data(mushroom)
install.packages("data.tree")
library(data.tree)
data(mushroom)
mushroom
tree <- Node$new("mushroom")
TrainID3(tree, mushroom)
print(tree, "feature", "obsCount")
tree <- Node$new("game")
TrainID3(tree, game)
print(tree, "feature", "obsCount")
data(zaki)
summary(zaki)
as(zaki, "data.frame")
summary(zaki)
# Generate rules
seq_rules <- cspade(zaki, parameter = list(support = 0.55))
#Summary information about the rules generated
summary(seq_rules)
#The rules generated with the support details
as(seq_rules, "data.frame")
zaki
data(zaki)
head(zaki,10)
zaki
data(zaki)
zaki
summary(zaki)
as(zaki, "data.frame")
summary(zaki)
as(seq_rules, "data.frame")
as(zaki, "data.frame")
?cspade
data(zaki)
summary(zaki)
as(zaki, "data.frame")
seq_rules <- cspade(zaki, parameter = list(support = 0.55))
#Summary information about the rules generated
summary(seq_rules)
#The rules generated with the support details
as(seq_rules, "data.frame")
head(zaki,10)
(
)
data(kyphosis)
head(kyphosis)
fit <- rpart(Kyphosis ~ Age + Number + Start, method="class", data=kyphosis)
# plot tree
plot(fit, uniform=TRUE, main="Classification Tree for Kyphosis")
text(fit, use.n=TRUE, all=TRUE, cex=1)
plot(fit, uniform=TRUE, main="Classification Tree for Kyphosis")
text(fit, use.n=TRUE, all=TRUE, cex=1)
kyphosis
###########
outlook = c('rainy', 'rainy', 'overcast', 'sunny', 'sunny',
'sunny', 'overcast', 'rainy', 'rainy', 'sunny',
'rainy', 'overcast', 'overcast', 'sunny')
humidity = c('high', 'high', 'high', 'high', 'normal',
'normal', 'normal', 'high', 'normal', 'normal',
'normal', 'high', 'normal', 'high')
temp = c('hot', 'hot', 'hot', 'mild', 'cool',
'cool', 'cool', 'mild', 'cool', 'mild',
'mild', 'mild', 'hot', 'mild')
windy = c('false', 'true', 'false', 'false', 'false',
'true', 'true', 'false', 'false', 'false',
'true', 'true', 'false', 'true')
play = c('no', 'no', 'yes', 'yes', 'yes',
'no', 'yes', 'no', 'yes', 'yes',
'yes', 'yes', 'yes', 'no')
game = data.frame(outlook, humidity, temp, windy, play)
head(game)
tree <- Node$new("game")
TrainID3(tree, game)
print(tree, "feature", "obsCount")
